// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"thuanle/cse-mark/internal/configs"
	"thuanle/cse-mark/internal/delivery/tele"
	"thuanle/cse-mark/internal/delivery/tele/handlers"
	"thuanle/cse-mark/internal/delivery/tele/middlewares"
	"thuanle/cse-mark/internal/delivery/tele/views"
	"thuanle/cse-mark/internal/domain/course"
	"thuanle/cse-mark/internal/infra/http"
	"thuanle/cse-mark/internal/infra/mongo"
	"thuanle/cse-mark/internal/usecases/iam"
	"thuanle/cse-mark/internal/usecases/markimport"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	config := configs.LoadConfig()
	client, err := mongo.NewClient(config)
	if err != nil {
		return nil, err
	}
	rules := course.NewRules(config)
	repository := mongo.NewMarkRepo(client, config)
	guest := handlers.NewGuestHandler(rules, repository)
	courseRepository := mongo.NewCourseRepo(client, config)
	teacherRenderer := views.NewTeacherRenderer(rules)
	userRepository := mongo.NewUserRepo(client, config)
	authzService := iam.NewAuthzService(courseRepository, userRepository)
	downloaderRepository := http.NewSimpleDownloader(config)
	service := markimport.NewService(downloaderRepository, courseRepository, repository)
	teacher := handlers.NewTeacherHandler(courseRepository, rules, teacherRenderer, authzService, repository, service)
	admin := handlers.NewAdminHandler(userRepository)
	teacherOnly := middlewares.NewTeacherOnly(authzService)
	teleService, err := tele.NewService(config, guest, teacher, admin, teacherOnly)
	if err != nil {
		return nil, err
	}
	app := &App{
		Config:      config,
		MongoClient: client,
		TeleService: teleService,
	}
	return app, nil
}

// wire.go:

type App struct {
	Config      *configs.Config
	MongoClient *mongo.Client
	TeleService *tele.Service
}

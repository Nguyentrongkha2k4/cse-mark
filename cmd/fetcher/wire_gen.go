// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"thuanle/cse-mark/internal/configs"
	"thuanle/cse-mark/internal/domain/course"
	"thuanle/cse-mark/internal/infra/http"
	"thuanle/cse-mark/internal/infra/mongo"
	"thuanle/cse-mark/internal/usecases/coursequery"
	"thuanle/cse-mark/internal/usecases/markimport"
	"thuanle/cse-mark/internal/usecases/marksync"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	config := configs.LoadConfig()
	client, err := mongo.NewClient(config)
	if err != nil {
		return nil, err
	}
	repository := mongo.NewCourseRepo(client, config)
	rules := course.NewRules(config)
	activeCourseService := coursequery.NewActiveCourseService(repository, rules)
	downloaderRepository := http.NewSimpleDownloader(config)
	markRepository := mongo.NewMarkRepo(client, config)
	service := markimport.NewService(downloaderRepository, repository, markRepository)
	marksyncService := marksync.NewService(activeCourseService, downloaderRepository, service)
	app := &App{
		Config:      config,
		MongoClient: client,
		SyncService: marksyncService,
	}
	return app, nil
}

// wire.go:

type App struct {
	Config *configs.Config

	//infrastructures
	MongoClient *mongo.Client

	//usecases
	SyncService *marksync.Service
}
